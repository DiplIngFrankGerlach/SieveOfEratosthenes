

/*Sieve of Eratosthenes, with a full octet per number. Slightly better performance than a bitfield */
void Sieve2::run()
{ 

   var PrintfClass pfc;

   var int N;
   var CommandlineArgs cla;
   if(cla.numberOfArguments() == 2)
   {
       var String_16 nStr; 
       cla.getArgument(1,nStr);
       N = nStr.asNumber();
   }
   else{ pfc.fstr("Usage: sieve <N>").pr(); return;}

   //Algorithmus von https://de.wikipedia.org/wiki/Sieb_des_Eratosthenes
   var *char gestrichen[] =  new char[N+1];

   var char c0 = cast(char,0);
   var char c1 = cast(char,1);

   for(var int i=0;i < gestrichen.sz;i++) { gestrichen[i] = c0; }

   // Siebe mit allen (Prim-) Zahlen i, wobei i der kleinste Primfaktor einer zusammengesetzten
   // Zahl j = i*k ist. Der kleinste Primfaktor einer zusammengesetzten Zahl j kann nicht größer
   // als die Quadratwurzel von j <= n sein.
   var Math m;
   var int sqrtN = cast(int,m.wurzel(N));


   for(var int i=2; i <= sqrtN;i++)
   {  
     if(gestrichen[i] == c0)
     { 
         // i ist prim, gib i aus...
         pfc.fstr("$,").sa(i).pr();
         // ...und streiche seine Vielfachen, beginnend mit i*i
         // (denn k*i mit k<i wurde schon als Vielfaches von k gestrichen)
         var int iq = i * i;
         for(var int j = iq; j <= N; j = j + i)
         {
             //pfc.fstr("streiche $").sa(j).pr();
             gestrichen[j] = c1;
         }
     }
   } 
   // Gib die Primzahlen größer als Wurzel(n) aus - also die, die noch nicht gestrichen wurden
   
   for(var int i=sqrtN + 1; i <= N; i++)
   {
     if( gestrichen[i] == 0)
     {
         // i ist prim, gib i aus
         pfc.fstr("$,").sa(i).pr();
     }
   }

}
